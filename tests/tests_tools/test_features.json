{
    "new_domain": {
        "new_feature_with_multiple_tag": {
            "complexity": "constant",
            "description": "A new feature with multiple tags",
            "function": "new_feature_with_multiple_tag",
            "parameters": "",
            "tag": [
                "inertial",
                "emg"
            ],
            "use": "yes"
        },
        "new_feature_with_tag": {
            "complexity": "constant",
            "description": "A new feature with a tag",
            "function": "new_feature_with_tag",
            "parameters": "",
            "tag": "inertial",
            "use": "yes"
        }
    },
    "spectral": {
        "FFT mean coefficient": {
            "complexity": "constant",
            "description": "Computes the mean value of each spectrogram frequency.",
            "function": "dream.fft_mean_coeff",
            "n_features": "nfreq",
            "parameters": {
                "fs": 100,
                "nfreq": 256
            },
            "use": "yes"
        },
        "Fundamental frequency": {
            "complexity": "log",
            "description": "Computes the fundamental frequency.",
            "function": "dream.fundamental_frequency",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Human range energy": {
            "complexity": "log",
            "description": "Computes the human range energy ratio given by the ratio between the energy in frequency 0.6-2.5Hz and the whole energy band.",
            "function": "dream.human_range_energy",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "tag": "inertial",
            "use": "yes"
        },
        "LPCC": {
            "complexity": "log",
            "description": "Computes the linear prediction cepstral coefficients.",
            "function": "dream.lpcc",
            "n_features": "n_coeff",
            "parameters": {
                "n_coeff": 12
            },
            "tag": "audio",
            "use": "yes"
        },
        "MFCC": {
            "complexity": "constant",
            "description": "Computes the MEL cepstral coefficients.",
            "function": "dream.mfcc",
            "n_features": "num_ceps",
            "parameters": {
                "cep_lifter": 22,
                "fs": 100,
                "nfft": 512,
                "nfilt": 40,
                "num_ceps": 12,
                "pre_emphasis": 0.97
            },
            "tag": [
                "audio",
                "emg"
            ],
            "use": "yes"
        },
        "Max power spectrum": {
            "complexity": "log",
            "description": "Computes the maximum power spectrum density.",
            "function": "dream.max_power_spectrum",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Maximum frequency": {
            "complexity": "log",
            "description": "Computes the maximum frequency.",
            "function": "dream.max_frequency",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Median frequency": {
            "complexity": "log",
            "description": "Computes the median frequency.",
            "function": "dream.median_frequency",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Power bandwidth": {
            "complexity": "log",
            "description": "Computes power spectrum density bandwidth of the signal.",
            "function": "dream.power_bandwidth",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Spectral centroid": {
            "complexity": "linear",
            "description": "Computes the barycenter of the spectrum.",
            "function": "dream.spectral_centroid",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "tag": "audio",
            "use": "yes"
        },
        "Spectral decrease": {
            "complexity": "log",
            "description": "Computes the amount of decreasing of the spectra amplitude.",
            "function": "dream.spectral_decrease",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Spectral distance": {
            "complexity": "log",
            "description": "Computes the signal spectral distance.",
            "function": "dream.spectral_distance",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Spectral entropy": {
            "complexity": "log",
            "description": "Computes the spectral entropy of the signal based on Fourier transform.",
            "function": "dream.spectral_entropy",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "tag": "eeg",
            "use": "yes"
        },
        "Spectral kurtosis": {
            "complexity": "linear",
            "description": "Computes the flatness of a distribution around its mean value.",
            "function": "dream.spectral_kurtosis",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Spectral positive turning points": {
            "complexity": "log",
            "description": "Computes number of positive turning points of the fft magnitude signal",
            "function": "dream.spectral_positive_turning",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Spectral roll-off": {
            "complexity": "log",
            "description": "Computes the frequency where 95% of the signal magnitude is contained below of this value.",
            "function": "dream.spectral_roll_off",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "tag": "audio",
            "use": "yes"
        },
        "Spectral roll-on": {
            "complexity": "log",
            "description": "Computes the frequency where 5% of the signal magnitude is contained below of this value.",
            "function": "dream.spectral_roll_on",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Spectral skewness": {
            "complexity": "linear",
            "description": "Computes the asymmetry of a distribution around its mean value.",
            "function": "dream.spectral_skewness",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Spectral slope": {
            "complexity": "log",
            "description": "Computes the spectral slope, obtained by linear regression of the spectral amplitude.",
            "function": "dream.spectral_slope",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Spectral spread": {
            "complexity": "linear",
            "description": "Computes the spread of the spectrum around its mean value.",
            "function": "dream.spectral_spread",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Spectral variation": {
            "complexity": "log",
            "description": "Computes the amount of variation of the spectrum along time.",
            "function": "dream.spectral_variation",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Wavelet absolute mean": {
            "complexity": "linear",
            "description": "Computes CWT absolute mean value of each wavelet scale.",
            "function": "dream.wavelet_abs_mean",
            "n_features": "widths",
            "parameters": {
                "function": "scipy.signal.ricker",
                "widths": "np.arange(1,10)"
            },
            "tag": [
                "eeg",
                "ecg"
            ],
            "use": "yes"
        },
        "Wavelet energy": {
            "complexity": "linear",
            "description": "Computes CWT energy of each wavelet scale.",
            "function": "dream.wavelet_energy",
            "n_features": "widths",
            "parameters": {
                "function": "scipy.signal.ricker",
                "widths": "np.arange(1,10)"
            },
            "tag": "eeg",
            "use": "yes"
        },
        "Wavelet entropy": {
            "complexity": "linear",
            "description": "Computes CWT entropy of the signal.",
            "function": "dream.wavelet_entropy",
            "n_features": 1,
            "parameters": {
                "function": "scipy.signal.ricker",
                "widths": "np.arange(1,10)"
            },
            "tag": "eeg",
            "use": "yes"
        },
        "Wavelet standard deviation": {
            "complexity": "linear",
            "description": "Computes CWT std value of each wavelet scale.",
            "function": "dream.wavelet_std",
            "n_features": "widths",
            "parameters": {
                "function": "scipy.signal.ricker",
                "widths": "np.arange(1,10)"
            },
            "tag": "eeg",
            "use": "yes"
        },
        "Wavelet variance": {
            "complexity": "linear",
            "description": "Computes CWT variance value of each wavelet scale.",
            "function": "dream.wavelet_var",
            "n_features": "widths",
            "parameters": {
                "function": "scipy.signal.ricker",
                "widths": "np.arange(1,10)"
            },
            "tag": "eeg",
            "use": "yes"
        }
    },
    "statistical": {
        "Absolute energy": {
            "complexity": "log",
            "description": "Computes the absolute energy of the signal.",
            "function": "dream.abs_energy",
            "n_features": 1,
            "parameters": "",
            "tag": "audio",
            "use": "yes"
        },
        "Average power": {
            "complexity": "constant",
            "description": "Computes the average power of the signal.",
            "function": "dream.average_power",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "tag": "audio",
            "use": "yes"
        },
        "ECDF": {
            "complexity": "log",
            "description": "Computes the values of ECDF (empirical cumulative distribution function) along the time axis.",
            "function": "dream.ecdf",
            "n_features": "d",
            "parameters": {
                "d": 10
            },
            "use": "yes"
        },
        "ECDF Percentile": {
            "complexity": "log",
            "description": "Determines the percentile value of the ECDF.",
            "function": "dream.ecdf_percentile",
            "n_features": "percentile",
            "parameters": {
                "percentile": "[0.2, 0.8]"
            },
            "use": "yes"
        },
        "ECDF Percentile Count": {
            "complexity": "log",
            "description": "Determines the cumulative sum of samples that are less than the percentile.",
            "function": "dream.ecdf_percentile_count",
            "n_features": "percentile",
            "parameters": {
                "percentile": "[0.2, 0.8]"
            },
            "use": "yes"
        },
        "Entropy": {
            "complexity": "log",
            "description": "Computes the entropy of the signal using the Shannon Entropy.",
            "function": "dream.entropy",
            "n_features": 1,
            "parameters": {
                "prob": "standard"
            },
            "tag": "eeg",
            "use": "yes"
        },
        "Histogram": {
            "complexity": "log",
            "description": "Computes histogram of the signal.",
            "function": "dream.hist",
            "n_features": "nbins",
            "parameters": {
                "nbins": 10,
                "r": 1
            },
            "use": "yes"
        },
        "Interquartile range": {
            "complexity": "constant",
            "description": "Computes interquartile range of the signal.",
            "function": "dream.interq_range",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Kurtosis": {
            "complexity": "constant",
            "description": "Computes kurtosis of the signal.",
            "function": "dream.kurtosis",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Max": {
            "complexity": "constant",
            "description": "Computes the maximum value of the signal.",
            "function": "dream.calc_max",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Mean": {
            "complexity": "constant",
            "description": "Computes the mean value of the signal.",
            "function": "dream.calc_mean",
            "n_features": 1,
            "parameters": "",
            "tag": "inertial",
            "use": "yes"
        },
        "Mean absolute deviation": {
            "complexity": "log",
            "description": "Computes mean absolute deviation of the signal.",
            "function": "dream.mean_abs_deviation",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Median": {
            "complexity": "constant",
            "description": "Computes median of the signal.",
            "function": "dream.calc_median",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Median absolute deviation": {
            "complexity": "constant",
            "description": "Computes median absolute deviation of the signal.",
            "function": "dream.median_abs_deviation",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Min": {
            "complexity": "constant",
            "description": "Computes the minimum value of the signal.",
            "function": "dream.calc_min",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Peak to peak distance": {
            "complexity": "constant",
            "description": "Computes the peak to peak distance.",
            "function": "dream.pk_pk_distance",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Root mean square": {
            "complexity": "constant",
            "description": "Computes root mean square of the signal.",
            "function": "dream.rms",
            "n_features": 1,
            "parameters": "",
            "tag": [
                "emg",
                "inertial"
            ],
            "use": "yes"
        },
        "Skewness": {
            "complexity": "constant",
            "description": "Computes skewness of the signal.",
            "function": "dream.skewness",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Standard deviation": {
            "complexity": "constant",
            "description": "Computes standard deviation of the signal.",
            "function": "dream.calc_std",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Variance": {
            "complexity": "constant",
            "description": "Computes variance of the signal.",
            "function": "dream.calc_var",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "new_feature": {
            "complexity": "constant",
            "description": "Computes a new feature",
            "function": "new_feature",
            "parameters": "",
            "use": "yes"
        },
        "new_feature_with_parameter": {
            "complexity": "constant",
            "description": "A new feature",
            "function": "new_feature_with_parameter",
            "parameters": {
                "weight": 0.5
            },
            "use": "yes"
        }
    },
    "temporal": {
        "Area under the curve": {
            "complexity": "log",
            "description": "Computes the area under the curve of the signal computed with trapezoid rule.",
            "function": "dream.auc",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Autocorrelation": {
            "complexity": "constant",
            "description": "Computes autocorrelation of the signal.",
            "function": "dream.autocorr",
            "n_features": 1,
            "parameters": "",
            "tag": "inertial",
            "use": "yes"
        },
        "Centroid": {
            "complexity": "constant",
            "description": "Computes the centroid along the time axis.",
            "function": "dream.calc_centroid",
            "n_features": 1,
            "parameters": {
                "fs": 100
            },
            "use": "yes"
        },
        "Mean absolute diff": {
            "complexity": "constant",
            "description": "Computes mean absolute differences of the signal.",
            "function": "dream.mean_abs_diff",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Mean diff": {
            "complexity": "constant",
            "description": "Computes mean of differences of the signal.",
            "function": "dream.mean_diff",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Median absolute diff": {
            "complexity": "constant",
            "description": "Computes median absolute differences of the signal.",
            "function": "dream.median_abs_diff",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Median diff": {
            "complexity": "constant",
            "description": "Computes median of differences of the signal.",
            "function": "dream.median_diff",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Negative turning points": {
            "complexity": "constant",
            "description": "Computes number of negative turning points of the signal.",
            "function": "dream.negative_turning",
            "n_features": 1,
            "parameters": "",
            "tag": "emg",
            "use": "yes"
        },
        "Neighbourhood peaks": {
            "complexity": "constant",
            "description": "Computes the number of peaks from a defined neighbourhood of the signal.",
            "function": "dream.neighbourhood_peaks",
            "n_features": 1,
            "parameters": {
                "n": 10
            },
            "use": "yes"
        },
        "Positive turning points": {
            "complexity": "constant",
            "description": "Computes number of positive turning points of the signal.",
            "function": "dream.positive_turning",
            "n_features": 1,
            "parameters": "",
            "tag": "emg",
            "use": "yes"
        },
        "Signal distance": {
            "complexity": "constant",
            "description": "Computes signal traveled distance.",
            "function": "dream.distance",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Slope": {
            "complexity": "log",
            "description": "Computes the slope of the signal by fitting a linear equation to the observed data.",
            "function": "dream.slope",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Sum absolute diff": {
            "complexity": "constant",
            "description": "Computes sum of absolute differences of the signal.",
            "function": "dream.sum_abs_diff",
            "n_features": 1,
            "parameters": "",
            "use": "yes"
        },
        "Zero crossing rate": {
            "complexity": "constant",
            "description": "Computes Zero-crossing rate of the signal.",
            "function": "dream.zero_cross",
            "n_features": 1,
            "parameters": "",
            "tag": [
                "audio",
                "emg"
            ],
            "use": "yes"
        }
    }
}